syntax = "proto3";

package smarthome.v1;

import "google/api/annotations.proto";
import "smarthome/v1/common.proto";

option go_package = "github.com/velvetriddles/mini-smart-home/proto_generated/smarthome/v1;smarthomev1";

// AuthService обеспечивает аутентификацию и авторизацию пользователей
service AuthService {
  // Login аутентифицирует пользователя и возвращает JWT токен
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/login"
      body: "*"
    };
  }
  
  // Logout выполняет выход пользователя и отзывает JWT токен
  rpc Logout(LogoutRequest) returns (LogoutResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/logout"
      body: "*"
    };
  }
  
  // Refresh обновляет истекающий JWT токен и возвращает новый токен
  rpc Refresh(RefreshRequest) returns (RefreshResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/refresh"
      body: "*"
    };
  }
  
  // ValidateToken проверяет JWT токен и возвращает информацию о пользователе
  rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);
  
  // CheckHealth проверяет состояние службы
  rpc CheckHealth(Empty) returns (HealthResponse);
}

// LoginRequest - запрос на вход в систему
message LoginRequest {
  string username = 1; // Имя пользователя или email
  string password = 2; // Пароль пользователя
}

// LoginResponse содержит токены аутентификации и информацию о пользователе
message LoginResponse {
  string access_token = 1;      // JWT-токен доступа
  string refresh_token = 2;     // Токен обновления
  int64 expires_at = 3;         // Unix-время истечения access_token
  User user = 4;                // Информация о пользователе
}

// LogoutRequest - запрос на выход из системы
message LogoutRequest {
  string access_token = 1;  // JWT-токен для отзыва
}

// LogoutResponse содержит статус операции выхода
message LogoutResponse {
  bool success = 1;         // Успешность операции
  string message = 2;       // Сообщение о результате операции
}

// RefreshRequest - запрос на обновление токена
message RefreshRequest {
  string refresh_token = 1; // Токен обновления
}

// RefreshResponse содержит новый набор токенов
message RefreshResponse {
  string access_token = 1;  // Новый JWT-токен доступа
  string refresh_token = 2; // Новый токен обновления
  int64 expires_at = 3;     // Unix-время истечения access_token
}

// ValidateTokenRequest - запрос на валидацию токена
message ValidateTokenRequest {
  string access_token = 1;  // JWT-токен для проверки
}

// ValidateTokenResponse содержит результат валидации токена
message ValidateTokenResponse {
  bool valid = 1;           // Валидность токена
  User user = 2;            // Информация о пользователе
  string error = 3;         // Ошибка (если есть)
}

// User представляет пользователя системы
message User {
  string id = 1;            // Уникальный идентификатор
  string username = 2;      // Имя пользователя
  string email = 3;         // Email пользователя
  repeated string roles = 4; // Роли пользователя
}

// HealthResponse содержит информацию о состоянии сервиса
message HealthResponse {
  bool ready = 1;      // Готовность сервиса
  string version = 2;  // Версия сервиса
} 